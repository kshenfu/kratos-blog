// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type CommentServiceHandler interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentReply, error)

	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error)

	GetComment(context.Context, *GetCommentRequest) (*GetCommentReply, error)

	ListComment(context.Context, *ListCommentRequest) (*ListCommentReply, error)

	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentReply, error)
}

func NewCommentServiceHandler(srv CommentServiceHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/v1/comment", func(w http.ResponseWriter, r *http.Request) {
		var in CreateCommentRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateComment(ctx, req.(*CreateCommentRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateCommentReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/v1/comment/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateCommentRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateComment(ctx, req.(*UpdateCommentRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateCommentReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("PUT")

	r.HandleFunc("/v1/comment/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteCommentRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteComment(ctx, req.(*DeleteCommentRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteCommentReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("DELETE")

	r.HandleFunc("/v1/comment/{id}", func(w http.ResponseWriter, r *http.Request) {
		var in GetCommentRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		if err := binding.BindVars(mux.Vars(r), &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComment(ctx, req.(*GetCommentRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetCommentReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	r.HandleFunc("/v1/comment", func(w http.ResponseWriter, r *http.Request) {
		var in ListCommentRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComment(ctx, req.(*ListCommentRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListCommentReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("GET")

	return r
}

type CommentServiceHTTPClient interface {
	CreateComment(ctx context.Context, req *CreateCommentRequest, opts ...http1.CallOption) (rsp *CreateCommentReply, err error)

	DeleteComment(ctx context.Context, req *DeleteCommentRequest, opts ...http1.CallOption) (rsp *DeleteCommentReply, err error)

	GetComment(ctx context.Context, req *GetCommentRequest, opts ...http1.CallOption) (rsp *GetCommentReply, err error)

	ListComment(ctx context.Context, req *ListCommentRequest, opts ...http1.CallOption) (rsp *ListCommentReply, err error)

	UpdateComment(ctx context.Context, req *UpdateCommentRequest, opts ...http1.CallOption) (rsp *UpdateCommentReply, err error)
}

type CommentServiceHTTPClientImpl struct {
	cc *http1.Client
}

func NewCommentServiceHTTPClient(client *http1.Client) CommentServiceHTTPClient {
	return &CommentServiceHTTPClientImpl{client}
}

func (c *CommentServiceHTTPClientImpl) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...http1.CallOption) (out *CreateCommentReply, err error) {
	path := binding.EncodePath("POST", "/v1/comment", in)
	out = &CreateCommentReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("POST"), http1.PathPattern("/v1/comment"))

	return
}

func (c *CommentServiceHTTPClientImpl) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...http1.CallOption) (out *DeleteCommentReply, err error) {
	path := binding.EncodePath("DELETE", "/v1/comment/{id}", in)
	out = &DeleteCommentReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("DELETE"), http1.PathPattern("/v1/comment/{id}"))

	return
}

func (c *CommentServiceHTTPClientImpl) GetComment(ctx context.Context, in *GetCommentRequest, opts ...http1.CallOption) (out *GetCommentReply, err error) {
	path := binding.EncodePath("GET", "/v1/comment/{id}", in)
	out = &GetCommentReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/comment/{id}"))

	return
}

func (c *CommentServiceHTTPClientImpl) ListComment(ctx context.Context, in *ListCommentRequest, opts ...http1.CallOption) (out *ListCommentReply, err error) {
	path := binding.EncodePath("GET", "/v1/comment", in)
	out = &ListCommentReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("GET"), http1.PathPattern("/v1/comment"))

	return
}

func (c *CommentServiceHTTPClientImpl) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...http1.CallOption) (out *UpdateCommentReply, err error) {
	path := binding.EncodePath("PUT", "/v1/comment/{id}", in)
	out = &UpdateCommentReply{}

	err = c.cc.Invoke(ctx, path, in, &out, http1.Method("PUT"), http1.PathPattern("/v1/comment/{id}"))

	return
}
