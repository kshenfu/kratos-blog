// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/blog/v1/comment/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Comment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 10 {
		return CommentValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
	}

	// no validation rules for Content

	// no validation rules for Like

	return nil
}

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 10 {
		return CreateCommentRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
	}

	// no validation rules for Content

	return nil
}

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCommentReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCommentReplyValidationError is the validation error returned by
// CreateCommentReply.Validate if the designated constraints aren't met.
type CreateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReplyValidationError) ErrorName() string {
	return "CreateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReplyValidationError{}

// Validate checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Content

	return nil
}

// UpdateCommentRequestValidationError is the validation error returned by
// UpdateCommentRequest.Validate if the designated constraints aren't met.
type UpdateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRequestValidationError) ErrorName() string {
	return "UpdateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRequestValidationError{}

// Validate checks the field values on UpdateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCommentReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommentReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCommentReplyValidationError is the validation error returned by
// UpdateCommentReply.Validate if the designated constraints aren't met.
type UpdateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReplyValidationError) ErrorName() string {
	return "UpdateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReplyValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCommentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteCommentReplyValidationError is the validation error returned by
// DeleteCommentReply.Validate if the designated constraints aren't met.
type DeleteCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyValidationError) ErrorName() string {
	return "DeleteCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCommentReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCommentReplyValidationError is the validation error returned by
// GetCommentReply.Validate if the designated constraints aren't met.
type GetCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReplyValidationError) ErrorName() string { return "GetCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReplyValidationError{}

// Validate checks the field values on ListCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCommentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListCommentRequestValidationError is the validation error returned by
// ListCommentRequest.Validate if the designated constraints aren't met.
type ListCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentRequestValidationError) ErrorName() string {
	return "ListCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentRequestValidationError{}

// Validate checks the field values on ListCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListCommentReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCommentReplyValidationError is the validation error returned by
// ListCommentReply.Validate if the designated constraints aren't met.
type ListCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReplyValidationError) ErrorName() string { return "ListCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReplyValidationError{}
